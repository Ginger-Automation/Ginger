name: Ginger-Tests

on:
  workflow_call

jobs:
  windows:
    uses: nadeemjazmawe/Ginger/.github/workflows/WindowsBuild.yml@master
    
  Linux:
    uses: nadeemjazmawe/Ginger/.github/workflows/LinuxBuild.yml@master
    
  MacOS:
    uses: nadeemjazmawe/Ginger/.github/workflows/MacBuild.yml@master


# jobs:
# # ------------------------------------------------------------------------------------------------------
# # Ubuntu && MacOS Job
# # ------------------------------------------------------------------------------------------------------
#   Ubuntu-MacOS:
#     strategy: 
#       matrix:
#         os: [macos-latest, ubuntu-latest] 

#     env:
#       BUILD_CONFIGURATION: Release
    
#     runs-on: ${{ matrix.os }}
    
#     steps:     
#       - name: Download Airtifacts
#         uses: actions/download-artifact@v3
#         with:
#           name: ginger-artifact
      
# # ------------------------------------------------------------------------------------------------------
# # Install .Net core SDK 6.0.301
# # ------------------------------------------------------------------------------------------------------
#       - uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: '6.0.301'
      
    
# # ------------------------------------------------------------------------------------------------------
# # start Testing For Ubuntu && MacOS
# # ------------------------------------------------------------------------------------------------------
#       - name: Testing GingerUtilsTest
#         run: |
#           dotnet test  Ginger/GingerUtilsTest --configuration $env:BUILD_CONFIGURATION --logger trx --verbosity=normal

#       - name: 'printing file - GingerConsole.dll'
#         if: success() || failure()        # run this step even if previous step failed
#         run: | 
#           ls -alt Ginger/GingerUtilsTest 
      
#       - name: 'Testing GingerCoreCommonTest'
#         if: success() || failure()        # run this step even if previous step failed
#         run: |
#           dotnet test  Ginger/GingerCoreCommonTest --configuration ${BUILD_CONFIGURATION} --logger trx --verbosity=normal

#         # for GingerCoreNET we use run setting to limit to have one worker thread due to workspace limitation
#       - name: 'Testing GingerCoreNETUnitTest'
#         if: success() || failure()        # run this step even if previous step failed
#         run: | 
#           dotnet test  Ginger/GingerCoreNETUnitTest --configuration ${BUILD_CONFIGURATION} --logger trx --verbosity=normal

#       - name: 'Testing GingerPluginCoreTest'
#         if: success() || failure()        # run this step even if previous step failed
#         run:  |
#           dotnet test  Ginger/GingerPluginCoreTest --configuration ${BUILD_CONFIGURATION} --logger trx --verbosity=normal

#       - name: 'Testing GingerConsoleTest'
#         if: success() || failure()        # run this step even if previous step failed
#         run: | 
#           dotnet test  Ginger/GingerConsoleTest --configuration ${BUILD_CONFIGURATION} --logger trx --verbosity=normal

#       - name: 'Testing GingerAutoPilotTest'
#         if: success() || failure()        # run this step even if previous step failed
#         run: |
#           dotnet test  Ginger/GingerAutoPilotTest --configuration ${BUILD_CONFIGURATION} --logger trx --verbosity=normal
        
        
        
# # ------------------------------------------------------------------------------------------------------
# # Publish GingerRuntime
# # ------------------------------------------------------------------------------------------------------
#       - name: 'Publish GingerRuntime'
#         if: matrix.os == 'ubuntu-latest'
#         run: dotnet publish  Ginger/GingerRuntime -c ${BUILD_CONFIGURATION}
        
        
        
# # ------------------------------------------------------------------------------------------------------
# # Publish Test Results
# # ------------------------------------------------------------------------------------------------------   
#       - name: Test Report
#         uses: dorny/test-reporter@v1
#         if: matrix.os == 'ubuntu-latest' && (success() || failure())        # run this step even if previous step failed
#         with:
#           name: Ginger Ubuntu UnitTests    # Name of the check run which will be created
#           path: "**/*.trx"                # Path to test results
#           reporter: dotnet-trx            # Format of test results
          
          
#       - name: Test Report
#         uses: dorny/test-reporter@v1
#         if:  matrix.os == 'macos-latest' && (success() || failure())         # run this step even if previous step failed
#         with:
#           name: "Ginger ${{ matrix.os }} UnitTests"    # Name of the check run which will be created
#           path: "**/*.trx"                # Path to test results
#           reporter: dotnet-trx            # Format of test results
          
# # ------------------------------------------------------------------------------------------------------
# # Run Standalone CLI Test
# # ------------------------------------------------------------------------------------------------------          
#       - name: Run Standalone CLI Test
#         if: matrix.os == 'ubuntu-latest' && (success() || failure())        # run this step even if previous step failed
#         run: |
#           chmod +x CLITestsGithub.ps1
#           ./CLITestsGithub.ps1




# # ------------------------------------------------------------------------------------------------------
# #  Windows Job
# # ------------------------------------------------------------------------------------------------------
#   Windows:
#     runs-on: windows-latest
    
#     env:
#       BUILD_CONFIGURATION: Release
      
#     steps:
#       - name: Download Airtifacts
#         uses: actions/download-artifact@v3
#         with:
#           name: ginger-artifact

# # ------------------------------------------------------------------------------------------------------
# # Install .Net core SDK 6.0.301
# # ------------------------------------------------------------------------------------------------------
#       - name: Install .NET Core
#         uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: 6.0.301
          
# # ------------------------------------------------------------------------------------------------------
# # Install Nuget tool v1.0.5
# # ------------------------------------------------------------------------------------------------------
#       - name: Setup Nuget
#         uses: Nuget/setup-nuget@v1.0.5

# # ------------------------------------------------------------------------------------------------------
# # Restore Ginger solution NuGet packages
# # ------------------------------------------------------------------------------------------------------
#       - name: Restore nuget packages
#         run: nuget restore ./Ginger/Ginger.sln
        
# # ------------------------------------------------------------------------------------------------------
# # SeaLight - Downloading the .NET agent files && Scanning a build using MSBuild
# # ---------------------------------------------------------------------------------------------------
#       - name: Download Sealights .Net agent 
#         env:
#           SLDOMAIN: amdocs.sealights.co
#           APP_NAME: Ginger
#           APP_NAMESPACE: Amdocs.*,ginger.*
#           PR_NUMBER: ${{github.event.pull_request.number}}
#           PR_TARGET_BRANCH: ${{github.head_ref}}
#           PR_LAST_COMMIT: ${{ github.event.pull_request.head.sha }}
#           REPO_URL: ${{github.repositoryUrl	}}
          
#         run: |
#           Write-Output "Build Reason =  ${{github.event_name}}"
#           echo $env:SLDOMAIN
#           echo $env:BUILD_CONFIGURATION
#           Write-Output "Token $($env:SLDOMAIN.SubString($env:SLDOMAIN.Length-5))"
          
#           [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
#           Write-Output "Download the Sealights DotNet agent version set in settings..." 
          
#           $agentversion = ((iwr -Uri https://amdocs.sealights.co/api/v2/agents/dotnet/recommended -Headers @{'Accept' = 'application/json'; 'Authorization' = "Bearer ${{ secrets.SLT }}"}).Content | ConvertFrom-Json | Select-Object agent).agent.version
#           iwr -OutFile sealights-dotnet-agent.zip -Uri http://agents.sealights.co/SL.DotNet/SL.DotNet-$($agentversion).zip
          
#           Expand-Archive .\sealights-dotnet-agent.zip -DestinationPath SL.DotNet -Force
          
#           Write-Output "Sealights agent version used is:$(Get-Content .\SL.DotNet\version.txt)"
          
#           #Retrieve the same name of target branch as reported in Sealights Dashboard by removing the uncecessary prefix
#           Write-Output "`n*** Create PR BSID ***"
#           D:\a\gingertest\gingertest\SL.DotNet\x64\SL.DotNet.exe prConfig --buildSessionId 1673245202505 --appName $APP_NAME --pullRequestNumber $PR_NUMBER --targetBranch $PR_TARGET_BRANCH --latestCommit $PR_LAST_COMMIT --repositoryUrl $REPO_URL --includeNamespace $APP_NAMESPACE  --token ${{ secrets.SLT }} --logEnabled true --logAppendConsole true --ignoreCertificateErrors true     
#           Write-Output "`n*** Prepare for MSBuild ***"
#           .\SL.DotNet\x64\SL.DotNet.exe prepareForMsBuild --buildSessionId 1673245202505 --workspacePath .\Ginger --baseDir . --ignoreGeneratedCode true --debugMode true --logEnabled true --logAppendConsole true --ignoreCertificateErrors true --token ${{ secrets.SLT }} --scm git --scmProvider vsts



# # ------------------------------------------------------------------------------------------------------
# # Start Testing For Windows
# # ------------------------------------------------------------------------------------------------------
#       - name: Testing GingerUtilsTest
#         if: success() || failure() 
#         run: |
#           dotnet test Ginger/GingerUtilsTest --configuration $env:BUILD_CONFIGURATION --logger trx  --results-directory D:\a\TestResults --verbosity=normal

#       - name: Testing GingerCoreCommonTest
#         if: success() || failure()  
#         run: |
#           dotnet test Ginger/GingerCoreCommonTest --configuration $env:BUILD_CONFIGURATION --logger trx --results-directory D:\a\TestResults --verbosity=normal

#         # for GingerCoreNET we use run setting to limit to have one worker thread due to workspace limitation
#       - name: Testing GingerCoreNETUnitTest
#         if: success() || failure()  
#         run: |
#           dotnet test Ginger/GingerCoreNETUnitTest --configuration $env:BUILD_CONFIGURATION --logger trx --results-directory D:\a\TestResults --verbosity=normal

#       - name: Testing GingerPluginCoreTest
#         if: success() || failure()  
#         run: |
#           dotnet test Ginger/GingerPluginCoreTest --configuration $env:BUILD_CONFIGURATION --logger trx --results-directory D:\a\TestResults --verbosity=normal

#       - name: Testing GingerConsoleTest
#         if: success() || failure()  
#         run: |
#           dotnet test Ginger/GingerConsoleTest --configuration $env:BUILD_CONFIGURATION --logger trx --results-directory D:\a\TestResults --verbosity=normal

#       - name: Testing GingerAutoPilotTest
#         if: success() || failure()  
#         run: |
#           dotnet test Ginger/GingerAutoPilotTest --configuration $env:BUILD_CONFIGURATION --logger trx --results-directory D:\a\TestResults --verbosity=normal     
              
        
# # ------------------------------------------------------------------------------------------------------
# # Run .Net Framework tests using powershell and publish the results
# # ------------------------------------------------------------------------------------------------------

#       - name: Run tests for Ginger .NetFramework *Test Dlls
#         if: success() || failure()        # run this step even if previous step failed
#         run: powershell -file "TestDotNetFrameworkGithub.ps1"
      
# # ------------------------------------------------------------------------------------------------------
# # Publish Test Results
# # ------------------------------------------------------------------------------------------------------
#       - name: Test Report
#         uses: dorny/test-reporter@v1
#         if: success() || failure()        # run this step even if previous step failed
#         with:
#           name: Ginger Windows UnitTests    # Name of the check run which will be created
#           path:  "D:/a/TestResults/*.trx"                # Path to test results
#           reporter: dotnet-trx            # Format of test results
