name: Ginger Unit-Test

on:
  workflow_call:
      
  # pull_request:
  #   branches: 
  #     - master
  #     - Features/Linux-Migration
  #     - Releases/*
  #     - Releases/*/*

  # push:
  #   branches:
  #     - '**'

jobs:
    Test:
        name: ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
    
        env:
            BUILD_CONFIGURATION: "Release"
            SLDOMAIN: "amdocs.sealights.co"
            APP_NAME: "Ginger"
            APP_NAMESPACE: "Amdocs.*,ginger.*"
            PR_NUMBER: ${{github.event.pull_request.number}}
            PR_TARGET_BRANCH: "Releases/${{github.base_ref}}"
            PR_LAST_COMMIT: ${{ github.event.pull_request.head.sha }}
            REPO_URL: ${{github.repositoryUrl	}}
      
        steps:
# ------------------------------------------------------------------------------------------------------
# Restore static site content
# ------------------------------------------------------------------------------------------------------         
        -   name: Restore static site content -Windows
            if: runner.os == 'Windows'
            uses: actions/cache@v3.2.6
            with:
                path: ./**
                key: cache-site-windows-${{ github.run_number }}
                enableCrossOsArchive:
                    true

        -   name: Restore static site content - Linux
            if: runner.os == 'Linux'
            uses: actions/cache@v3.2.6
            with:
                path: ./**
                key: cache-site-linux-${{ github.run_number }}
                enableCrossOsArchive:
                    true

        -   name: Restore static site content - macOS
            if: runner.os == 'macOS'
            uses: actions/cache@v3.2.6
            with:
                path: ./**
                key: cache-site-macos-${{ github.run_number }}
                enableCrossOsArchive:
                    true
                

# ------------------------------------------------------------------------------------------------------
# Install .Net core SDK 8.0.100
# ------------------------------------------------------------------------------------------------------
        -   name: Setup .NET
            uses: actions/setup-dotnet@v3
            with:
                dotnet-version: 8.0.100
          
# ------------------------------------------------------------------------------------------------------
# Install Nuget tool v1.0.5
# ------------------------------------------------------------------------------------------------------
        -   name: Setup Nuget
            uses: Nuget/setup-nuget@v1.0.5

# ------------------------------------------------------------------------------------------------------
# Restore Ginger solution NuGet packages
# ------------------------------------------------------------------------------------------------------
        -   name: Restore nuget packages
            run: nuget restore ./Ginger/Ginger.sln
           
# ------------------------------------------------------------------------------------------------------
# Install msbild && Build Ginger Solution
# ------------------------------------------------------------------------------------------------------
        -   name: Add msbuild to PATH
            if: ${{github.workflow == 'Ginger Windows Test'}} 
            uses: microsoft/setup-msbuild@v1.0.2       

        -   name: Build Ginger Solution
            if: ${{github.workflow == 'Ginger Windows Test'}} 
            run: msbuild ./Ginger/Ginger.sln /p:DebugSymbols=true /p:DebugType=full /p:Configuration=$env:BUILD_CONFIGURATION
          
# ------------------------------------------------------------------------------------------------------
# Start Testing 
# ------------------------------------------------------------------------------------------------------
        -   name: 'Testing GingerUtilsTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerUtilsTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerCoreCommonTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerCoreCommonTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerCoreNETUnitTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerCoreNETUnitTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerPluginCoreTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerPluginCoreTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerConsoleTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerConsoleTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerAutoPilotTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerAutoPilotTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal     
        
# ------------------------------------------------------------------------------------------------------
# Run .Net Framework tests using powershell and publish the results
# ------------------------------------------------------------------------------------------------------
        -   name: Run tests for Ginger .NetFramework *Test Dlls for Windows
            if: success() || failure() && (runner.os == 'Windows')        # run this step even if previous step failed and if the OS is Windows
            run: powershell -file "TestDotNetFrameworkGithub.ps1"
  
# ------------------------------------------------------------------------------------------------------
# Run Standalone CLI Test
# ------------------------------------------------------------------------------------------------------          
        -   name: Run Standalone CLI Test for Linux
            if: success() || failure() && (runner.os == 'Linux')       # run this step even if previous step failed
            shell: bash
            run: |
                pwd 
                ls -alt
                chmod +x CLITestsGithub.sh
                sudo apt install dos2unix
                dos2unix -b CLITestsGithub.sh
                ./CLITestsGithub.sh
        
# ------------------------------------------------------------------------------------------------------
# Publish Test Results
# ------------------------------------------------------------------------------------------------------
        -   name: Test Report - Windows
            uses: dorny/test-reporter@v1
            if: success() || failure() && (runner.os == 'Windows')        # run this step even if previous step failed
            with:
                name: Ginger Windows UnitTests    # Name of the check run which will be created
                path: "D:/a/TestResults/*.trx"                # Path to test results
                reporter: dotnet-trx            # Format of test results
                
        -   name: Test Report - Linux
            uses: dorny/test-reporter@v1
            if: success() || failure()   && (runner.os == 'Linux')      # run this step even if previous step failed
            with:
                name: Ginger Linux UnitTests    # Name of the check run which will be created
                path: "**/*.trx"                # Path to test results
                reporter: dotnet-trx            # Format of test results 

        -   name: Test Report - MacOS
            uses: dorny/test-reporter@v1
            if: success() || failure()  && (runner.os == 'macOS')       # run this step even if previous step failed
            with:
                name: Ginger MacOS UnitTests    # Name of the check run which will be created
                path: "**/*.trx"                # Path to test results
                reporter: dotnet-trx            # Format of test results    
                
   
