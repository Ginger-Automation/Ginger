name: Ginger Windows Test

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    name: Windows Test
    runs-on: windows-latest
    
    env:
      BUILD_CONFIGURATION: "Release"
      SLDOMAIN: "amdocs.sealights.co"
      APP_NAME: "Ginger"
      APP_NAMESPACE: "Amdocs.*,ginger.*"
      PR_NUMBER: ${{github.event.pull_request.number}}
      PR_TARGET_BRANCH: "Releases/${{github.base_ref}}"
      PR_LAST_COMMIT: ${{ github.event.pull_request.head.sha }}
      REPO_URL: ${{github.repositoryUrl	}}
      
    steps:
# ------------------------------------------------------------------------------------------------------
# Copy Ginger repo
# ------------------------------------------------------------------------------------------------------    
      - name: Code Checkout 
        if: ${{github.workflow == 'Ginger Windows Test'}} 
        uses: actions/checkout@v3
        
        
      - name: Download Artifacts
        if: ${{github.workflow != 'Ginger Windows Test'}} 
        uses: actions/download-artifact@v3
        with:
          name: ginger-artifact

# ------------------------------------------------------------------------------------------------------
# Install .Net core SDK 8.0.100
# ------------------------------------------------------------------------------------------------------
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.100
          
# ------------------------------------------------------------------------------------------------------
# Install Nuget tool v1.0.5
# ------------------------------------------------------------------------------------------------------
      - name: Setup Nuget
        uses: Nuget/setup-nuget@v1.0.5

# ------------------------------------------------------------------------------------------------------
# Restore Ginger solution NuGet packages
# ------------------------------------------------------------------------------------------------------
      - name: Restore nuget packages
        run: nuget restore ./Ginger/Ginger.sln
        
# ------------------------------------------------------------------------------------------------------
# SeaLight - Downloading the .NET agent files && Scanning a build using MSBuild
# ---------------------------------------------------------------------------------------------------
     
      - name: Download Sealights .Net agent  
        run: |
          Write-Output "Build Reason =  ${{github.event_name}}"
          echo $env:SLDOMAIN
          echo $env:BUILD_CONFIGURATION
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Write-Output "Download the Sealights DotNet agent version set in settings..." 
          $agentversion = ((iwr -Uri https://amdocs.sealights.co/api/v2/agents/dotnet/recommended -Headers @{'Accept' = 'application/json'; 'Authorization' = "Bearer ${{ secrets.SLT }}"}).Content | ConvertFrom-Json | Select-Object agent).agent.version
          Write-Output "*** start download ***"
          iwr -OutFile sealights-dotnet-agent.zip -Uri http://agents.sealights.co/SL.DotNet/SL.DotNet-$($agentversion).zip
          Expand-Archive .\sealights-dotnet-agent.zip -DestinationPath SL.DotNet -Force
          Write-Output "Sealights agent version used is:$(Get-Content .\SL.DotNet\version.txt)"
          
      - name: Sealights - Generating a Pull Request Session ID
        id: SealightsPR
        if: ${{github.event_name == 'pull_request'}}
        run: |  
          Write-Output "*** Create PR BSID ***"
          .\SL.DotNet\x64\SL.DotNet prConfig --token ${{ secrets.SLT }} --appName ${{ env.APP_NAME }} --includeNamespace ${{ env.APP_NAMESPACE }} --pullRequestNumber 25 --latestCommit a51d0f337dc7547d20dbf5fbfea1c45831249325 --targetBranch Release/master --repositoryUrl ${{ env.REPO_URL }}
            
      - name: Sealights - Generating a Standard Session ID
        id: SealightsStandard
        if: ${{github.event_name != 'pull_request'}}
        run: |  
          Write-Output "*** Create Standard SID ***"
          .\SL.DotNet\x64\SL.DotNet config --token ${{ secrets.SLT }} --includeNamespace ${{ env.APP_NAMESPACE }} --appName ${{ env.APP_NAME }} --branchName  Release/master --buildName "Github.Nadeem.${{ github.run_number }}"
      
      - name: Sealights - Prepare for MSBuild
        id: SealightsMSBuild
        if: steps.SealightsStandard.outcome == 'success' || steps.SealightsPR.outcome == 'success'
        run: |  
            Write-Output "*** Prepare for MSBuild ***"
            .\SL.DotNet\x64\SL.DotNet.exe prepareForMsBuild --buildSessionIdFile buildSessionId --workspacePath .\Ginger --baseDir . --ignoreGeneratedCode true --debugMode true --logEnabled true --logAppendConsole true --ignoreCertificateErrors true --token ${{ secrets.SLT }} --scm git --scmProvider vsts
      
# ------------------------------------------------------------------------------------------------------
# SeaLights- Starting test stage && Starting Background test listener
# ------------------------------------------------------------------------------------------------------
      - name: Sealights - Starting test stage
        if: steps.SealightsMSBuild.outcome == 'success'     
        run: |
          .\SL.DotNet\x64\SL.DotNet.exe startExecution --token ${{ secrets.SLT }} --buildSessionIdFile buildSessionId --logEnabled true --logAppendConsole true --testStage "Unit Tests"
          
      - name: Sealights - Starting Background test listener
        if: steps.SealightsMSBuild.outcome == 'success'     
        run: |
          .\SL.DotNet\x64\SL.DotNet.exe startBackgroundTestListener --token ${{ secrets.SLT }} --buildSessionIdFile buildSessionId --logEnabled true --logAppendConsole true --testListenerSessionKey ${{ github.run_number }} --testStage "Unit Tests"
 
# ------------------------------------------------------------------------------------------------------
# Install msbild && Build Ginger Solution
# ------------------------------------------------------------------------------------------------------
      - name: Add msbuild to PATH
        if: ${{github.workflow == 'Ginger Windows Test'}} 
        uses: microsoft/setup-msbuild@v1.0.2       

      - name: Build Ginger Solution
        if: ${{github.workflow == 'Ginger Windows Test'}} 
        run: msbuild ./Ginger/Ginger.sln /p:DebugSymbols=true /p:DebugType=full /p:Configuration=$env:BUILD_CONFIGURATION
          
# ------------------------------------------------------------------------------------------------------
# Start Testing 
# ------------------------------------------------------------------------------------------------------
      - name: 'Testing GingerUtilsTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerUtilsTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

      - name: 'Testing GingerCoreCommonTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerCoreCommonTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

      - name: 'Testing GingerCoreNETUnitTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerCoreNETUnitTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

      - name: 'Testing GingerPluginCoreTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerPluginCoreTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

      - name: 'Testing GingerConsoleTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerConsoleTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

      - name: 'Testing GingerAutoPilotTest'
        if: success() || failure()  
        run: dotnet test  Ginger/GingerAutoPilotTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal     
        
# ------------------------------------------------------------------------------------------------------
# Run .Net Framework tests using powershell and publish the results
# ------------------------------------------------------------------------------------------------------
      - name: Run tests for Ginger .NetFramework *Test Dlls
        if: success() || failure()        # run this step even if previous step failed
        run: powershell -file "TestDotNetFrameworkGithub.ps1"
      
# ------------------------------------------------------------------------------------------------------
# Publish Test Results
# ------------------------------------------------------------------------------------------------------
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: Ginger Windows UnitTests    # Name of the check run which will be created
          path: "D:/a/TestResults/*.trx"                # Path to test results
          reporter: dotnet-trx            # Format of test results
             
   
# ------------------------------------------------------------------------------------------------------
# Sealight - Stop Background test listener && Ending a test stage && Upload report files
# ------------------------------------------------------------------------------------------------------          
      - name: Sealights - Stop Background test listener
        if: (success() || failure()) && steps.SealightsMSBuild.outcome == 'success'         # run this step even if previous step failed
        run: |
          .\SL.DotNet\x64\SL.DotNet.exe stopBackgroundTestListener --token ${{ secrets.SLT }} --buildSessionIdFile buildSessionId --logEnabled true --logAppendConsole true --testListenerSessionKey ${{ github.run_number }}
      - name: Sealights - Ending test stage
        if: (success() || failure()) && steps.SealightsMSBuild.outcome == 'success'        # run this step even if previous step failed
        run: |
          .\SL.DotNet\x64\SL.DotNet.exe endExecution --token ${{ secrets.SLT }} --buildSessionIdFile buildSessionId --logEnabled true --logAppendConsole true --testStage "Unit Tests"
              
      - name: Sealights - Upload test report
        if: (success() || failure()) && steps.SealightsMSBuild.outcome == 'success'         # run this step even if previous step failed
        run: |
          .\SL.DotNet\x64\SL.DotNet.exe uploadTestReport --token ${{ secrets.SLT }} --buildSessionIdFile buildSessionId --logEnabled true --logAppendConsole true --testStage "Unit Tests" --report "D:\\a\\TestResults"  
     