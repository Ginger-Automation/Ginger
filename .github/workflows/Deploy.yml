name: Deploy

on:
    workflow_dispatch: 
    
    workflow_call:

jobs:
    Deploy-Project:
      name: Deploy Releases to Github Release
      runs-on: ubuntu-latest
      steps:
# ------------------------------------------------------------------------------------------------------
# Createin version Tag & Number variables 
# ------------------------------------------------------------------------------------------------------
          -   name: Create Version Environment Variable
              id: set_version
              if: ${{github.workflow == 'CD'}} 
              run: |
                  if [[ ${{github.event.inputs.revision}} != 0 ]]; then 
                      echo "Alpha Version"
                      echo "gingertag=20${{ github.event.inputs.major}}.${{ github.event.inputs.minor}}-Alpha.${{github.event.inputs.build}}.${{ github.event.inputs.revision}}" >> $GITHUB_ENV
                  elif [[ ${{github.event.inputs.build}} != 0 && ${{github.event.inputs.revision}} == 0 ]]; then
                      echo "Beta Version"
                      echo "gingertag=20${{ github.event.inputs.major}}.${{ github.event.inputs.minor}}-Beta.${{ github.event.inputs.build}}" >> $GITHUB_ENV
                  elif [[ ${{github.event.inputs.build}} == 0  &&  ${{github.event.inputs.revision}} == 0 ]]; then
                      echo "Official Version"
                      echo "gingertag=20${{ github.event.inputs.major}}.${{ github.event.inputs.minor}}-Official" >> $GITHUB_ENV
                  fi
                  echo "ginger gingertag ${{env.gingertag}}"

          -   name: Print Version Environment Variable
              if: ${{github.workflow == 'CD'}} 
              run: |
                  echo "GingerNumber Version: ${{ env.gingernumber}}"
          
# ------------------------------------------------------------------------------------------------------
# Copy Ginger repo
# ------------------------------------------------------------------------------------------------------
          - uses: actions/checkout@v3
  
# ------------------------------------------------------------------------------------------------------
#  Download Windows Installer Artifact
# ------------------------------------------------------------------------------------------------------      
          - name: Download Windows Installer Artifact
            uses: actions/download-artifact@v3
            with:
                name: WindowsInstaller  

# ------------------------------------------------------------------------------------------------------
# Download GingerRuntime Artifact
# ------------------------------------------------------------------------------------------------------
          -   name: Restore GingerRuntime
              uses: actions/cache@v4
              with:
                  path: ./GingerRuntime-root.tar.gz
                  key: cache-GingerRuntime-${{ github.run_number }}
                  enableCrossOsArchive:
                      true

# ------------------------------------------------------------------------------------------------------
# Download GingerMacOSRuntime Artifact
# ------------------------------------------------------------------------------------------------------
          - name: Restore GingerMacOSRuntime
            uses: actions/cache@v4
            with:
              path: ./GingerMacOSRuntime-root.tar.gz
              key: cache-GingerMacOSRuntime-${{ github.run_number }}
              enableCrossOsArchive:
                true
        
# ------------------------------------------------------------------------------------------------------
# Create new Release for ginger
# ------------------------------------------------------------------------------------------------------
          -   name: Create Github Release
              id: create-new-release
              uses: GongT/actions-recreate-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
              with:
                  tag_name: v${{ env.gingertag}}
                  release_name: Ginger v${{ env.gingertag}}
                  draft: true

# ------------------------------------------------------------------------------------------------------
# Upload GingerRuntime.tar.gz to Github Releases 
# ------------------------------------------------------------------------------------------------------
          - name: Upload Assest to Github Releases - GingerRuntime.tar.gz
            uses: actions/upload-release-asset@v1
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              upload_url: ${{ steps.create-new-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              asset_path: ./GingerRuntime-root.tar.gz
              asset_name: GingerRuntime.${{ env.gingertag}}.tar.gz
              asset_content_type: application/gzip

# ------------------------------------------------------------------------------------------------------
# Upload GingerMacOSRuntime.tar.gz to Github Releases 
# ------------------------------------------------------------------------------------------------------
          - name: Upload Assest to Github Releases - GingerMacOSRuntime.tar.gz
            uses: actions/upload-release-asset@v1
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              upload_url: ${{ steps.create-new-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              asset_path: ./GingerMacOSRuntime-root.tar.gz
              asset_name: GingerMacOSRuntime.${{ env.gingertag}}.tar.gz
              asset_content_type: application/gzip

# ------------------------------------------------------------------------------------------------------
# Upload Ginger.exe to Github Releases 
# ------------------------------------------------------------------------------------------------------
          - name: Upload Assest to Github Releases - Ginger.exe
            uses: actions/upload-release-asset@v1
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              upload_url: ${{ steps.create-new-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              asset_path: ./Ginger.exe
              asset_name: Ginger.${{ env.gingertag}}.exe
              asset_content_type: application/exe 

# ------------------------------------------------------------------------------------------------------
# Upload Ginger Documents to Github Releases 
# ------------------------------------------------------------------------------------------------------
          - name: Upload Assest to Github Releases - Ginger.Release.Notes.pdf
            if: ( !(contains(env.gingertag , 'Beta' )) && !(contains(env.gingertag , 'Alpha' )) )
            uses: actions/upload-release-asset@v1
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              upload_url: ${{ steps.create-new-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              asset_path: ./Documents/Ginger.Release.Notes.pdf
              asset_name: Ginger.Release.Notes.pdf
              asset_content_type: application/doc


          - name: Upload Assest to Github Releases -  Ginger.System.Requirements.pdf
            if: ( !(contains(env.gingertag , 'Beta' )) && !(contains(env.gingertag , 'Alpha' )) )
            uses: actions/upload-release-asset@v1
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              upload_url: ${{ steps.create-new-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              asset_path: ./Documents/Ginger.System.Requirements.pdf
              asset_name: Ginger.System.Requirements.pdf
              asset_content_type: application/doc 


          - name: Upload Assest to Github Releases - GingerRuntime.System.Requirements.pdf
            if: ( !(contains(env.gingertag , 'Beta' )) && !(contains(env.gingertag , 'Alpha' )) )
            uses: actions/upload-release-asset@v1
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              upload_url: ${{ steps.create-new-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              asset_path: ./Documents/GingerRuntime.System.Requirements.pdf
              asset_name: GingerRuntime.System.Requirements.pdf
              asset_content_type: application/doc 
