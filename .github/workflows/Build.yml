name: Build Solution

on:
  workflow_call:
jobs:
    Build:
        name: ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
        env:
            BUILD_CONFIGURATION: Release
      
        steps:
# ------------------------------------------------------------------------------------------------------
# Createin version Tag & Number variables - only for CD Job
# ------------------------------------------------------------------------------------------------------      
        -   name: Create Version Environment Variable - Windows
            if: ${{github.workflow == 'CD' && runner.os == 'Windows'}} 
            id: set_version_windows
            run: |
                if ($env:GITHUB_EVENT_INPUTS_REVISION -ne 0) {
                    Write-Output "Alpha Version"
                    Write-Output "gingernumber=${{ github.event.inputs.major}}.${{ github.event.inputs.minor}}.${{ github.event.inputs.build}}.${{ github.event.inputs.revision}}" >> $env:GITHUB_ENV
                } elseif ($env:GITHUB_EVENT_INPUTS_BUILD -ne 0 -and $env:GITHUB_EVENT_INPUTS_REVISION -eq 0) {
                    Write-Output "Beta Version"
                    Write-Output "gingernumber=${{ github.event.inputs.major}}.${{ github.event.inputs.minor}}.${{ github.event.inputs.build}}.${{ github.event.inputs.revision}}" >> $env:GITHUB_ENV
                } elseif ($env:GITHUB_EVENT_INPUTS_BUILD -eq 0 -and $env:GITHUB_EVENT_INPUTS_REVISION -eq 0) {
                    Write-Output "Official Version"
                    Write-Output "gingernumber=${{ github.event.inputs.major}}.${{ github.event.inputs.minor}}.${{ github.event.inputs.build}}.${{ github.event.inputs.revision}}" >> $env:GITHUB_ENV
                }

        -   name: Create Version Environment Variable - Linux and macOS
            if: ${{github.workflow == 'CD' && (runner.os == 'Linux' || runner.os == 'macOS')}} 
            id: set_version_unix
            run: |
                if [[ ${{github.event.inputs.revision}} != 0 ]]; then 
                    echo "Alpha Version"
                    echo "gingernumber=${{ github.event.inputs.major}}.${{ github.event.inputs.minor}}.${{ github.event.inputs.build}}.${{ github.event.inputs.revision}}" >> $GITHUB_ENV
                elif [[ ${{github.event.inputs.build}} != 0 && ${{github.event.inputs.revision}} == 0 ]]; then
                    echo "Beta Version"
                    echo "gingernumber=${{ github.event.inputs.major}}.${{ github.event.inputs.minor}}.${{ github.event.inputs.build}}.${{ github.event.inputs.revision}}" >> $GITHUB_ENV
                elif [[ ${{github.event.inputs.build}} == 0  &&  ${{github.event.inputs.revision}} == 0 ]]; then
                    echo "Official Version"
                    echo "gingernumber=${{ github.event.inputs.major}}.${{ github.event.inputs.minor}}.${{ github.event.inputs.build}}.${{ github.event.inputs.revision}}" >> $GITHUB_ENV
                fi

        -   name: Print Version Environment Variable
            if: ${{github.workflow == 'CD'}} 
            run: |
                echo "GingerNumber Version: ${{ env.gingernumber}}"
                
          
# ------------------------------------------------------------------------------------------------------
# Copy Ginger repo
# ------------------------------------------------------------------------------------------------------
        -   uses: actions/checkout@v3
                
# ------------------------------------------------------------------------------------------------------
# Update Ginger Version 
# ------------------------------------------------------------------------------------------------------
        -   name: 'Update Assembly - Windows'
            if: ${{github.workflow == 'CD' && runner.os == 'Windows'}}
            run: |
                $save=((Get-Content .\Ginger\GingerCoreCommon/GingerCoreCommon.csproj) -replace '<AssemblyVersion>*.*.*.*</AssemblyVersion>','<AssemblyVersion>${{ env.gingernumber}}</AssemblyVersion>')  -replace '<FileVersion>*.*.*.*</FileVersion>','<FileVersion>${{ env.gingernumber}}</FileVersion>'
                echo $save > .\Ginger\GingerCoreCommon/GingerCoreCommon.csproj
                $save=(Get-Content .\Ginger\GingerInstallerScript.iss) -replace '#define MyAppVersion "*.*.*.*"','#define MyAppVersion "${{ env.gingernumber}}"'
                echo $save > .\Ginger\GingerInstallerScript.iss
                $save=(Get-Content .\Ginger\GingerCore\Drivers\JavaDriverLib\GingerJavaAgent\agent\com\amdocs\ginger\GingerAgent.java) -replace 'public static final String GINGER_JAVA_AGENT_VERSION="*.*.*.*";','public static final String GINGER_JAVA_AGENT_VERSION="${{ env.gingernumber}}";'
                echo $save > .\Ginger\GingerCore\Drivers\JavaDriverLib\GingerJavaAgent\agent\com\amdocs\ginger\GingerAgent.java
                $save=(Get-Content .\Ginger\GingerInstallerScriptGithub.iss) -replace '#define MyAppVersion "*.*.*.*"','#define MyAppVersion "${{ env.gingernumber}}"'
                echo $save > .\Ginger\GingerInstallerScriptGithub.iss

        -   name: 'Update Assembly - Linux'
            if: ${{github.workflow == 'CD' && runner.os == 'Linux'}}
            run: |
                sed -i 's/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ env.gingernumber}}<\/AssemblyVersion>/' ./Ginger/GingerCoreCommon/GingerCoreCommon.csproj
                sed -i 's/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ env.gingernumber}}<\/FileVersion>/' ./Ginger/GingerCoreCommon/GingerCoreCommon.csproj
                sed -i 's/#define MyAppVersion ".*"/#define MyAppVersion "${{ env.gingernumber}}"/' ./Ginger/GingerInstallerScript.iss
                sed -i 's/public static final String GINGER_JAVA_AGENT_VERSION=".*";/public static final String GINGER_JAVA_AGENT_VERSION="${{ env.gingernumber}}";/' ./Ginger/GingerCore/Drivers/JavaDriverLib/GingerJavaAgent/agent/com/amdocs/ginger/GingerAgent.java
                sed -i 's/#define MyAppVersion ".*"/#define MyAppVersion "${{ env.gingernumber}}"/' ./Ginger/GingerInstallerScriptGithub.iss

        -   name: 'Update Assembly - macOS'
            if: ${{github.workflow == 'CD' && runner.os == 'macOS'}}
            run: |
                sed -i '' 's/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ env.gingernumber}}<\/AssemblyVersion>/' ./Ginger/GingerCoreCommon/GingerCoreCommon.csproj
                sed -i '' 's/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ env.gingernumber}}<\/FileVersion>/' ./Ginger/GingerCoreCommon/GingerCoreCommon.csproj
                sed -i '' 's/#define MyAppVersion ".*"/#define MyAppVersion "${{ env.gingernumber}}"/' ./Ginger/GingerInstallerScript.iss
                sed -i '' 's/public static final String GINGER_JAVA_AGENT_VERSION=".*";/public static final String GINGER_JAVA_AGENT_VERSION="${{ env.gingernumber}}";/' ./Ginger/GingerCore/Drivers/JavaDriverLib/GingerJavaAgent/agent/com/amdocs/ginger/GingerAgent.java
                sed -i '' 's/#define MyAppVersion ".*"/#define MyAppVersion "${{ env.gingernumber}}"/' ./Ginger/GingerInstallerScriptGithub.iss

        -   name: 'Print OS type'
            run: |
                echo "Running on ${{ runner.os }}"
                
# ------------------------------------------------------------------------------------------------------
# Install .Net core SDK 8.0.100
# ------------------------------------------------------------------------------------------------------
        -   name: 'Install .NET 8'
            uses: actions/setup-dotnet@v3
            with:
                dotnet-version: 8.0.100
# ------------------------------------------------------------------------------------------------------
# Install Mono - for Ubuntu as pre-requisite for building Ginger
# ------------------------------------------------------------------------------------------------------
        -   name: 'Install Mono'
            if: runner.os == 'Linux'
            run: |
                sudo apt-get update
                sudo apt-get install -y mono-complete
   
# ------------------------------------------------------------------------------------------------------
# Install Nuget tool v1.0.5
# ------------------------------------------------------------------------------------------------------
        -   name: 'Setup Nuget'
            uses: Nuget/setup-nuget@v1.0.5

# ------------------------------------------------------------------------------------------------------
# Restore Ginger solution NuGet packages
# ------------------------------------------------------------------------------------------------------
        -   name: 'Restore nuget packages'
            run: nuget restore ./Ginger/Ginger.sln
        
# ------------------------------------------------------------------------------------------------------
# Build && Publish Ginger Solution
# ------------------------------------------------------------------------------------------------------
        -   name: 'Add msbuild to PATH'
            if: runner.os == 'Windows'
            uses: microsoft/setup-msbuild@v1.0.2

        -   name: 'Build Ginger Windows Solution'
            if: runner.os == 'Windows'
            run: msbuild ./Ginger/Ginger.sln /p:DebugSymbols=true /p:DebugType=full /p:Configuration=$env:BUILD_CONFIGURATION

        -   name: 'Publish GingerRuntime - Linux'
            if: runner.os == 'Linux'
            run: dotnet publish ./Ginger/GingerRuntime/GingerRuntime.csproj --runtime linux-x64 --self-contained  true -c Release
     
        -   name: 'Publish GingerRuntime - macOS'
            if: runner.os == 'macOS'
            run: dotnet publish ./Ginger/GingerRuntime/GingerRuntime.csproj --runtime osx-x64 --self-contained true -c Release
# ------------------------------------------------------------------------------------------------------
# Upload Artifacts 
# ------------------------------------------------------------------------------------------------------   
        -   name: Cache static site content - Windows
            id: cache_windows
            if: runner.os == 'Windows'
            uses: actions/cache@v4
            with:
                path: 
                    ./**
                key: 
                    cache-site-windows-${{github.run_number}}
                enableCrossOsArchive:
                    true

        -   name: Cache static site content - Linux
            id: cache_linux
            if: runner.os == 'Linux'
            uses: actions/cache@v4
            with:
                path: 
                    ./**
                key: 
                    cache-site-linux-${{ github.run_number }}
                enableCrossOsArchive:
                    true
            
            
        -   name: Cache static site content - macOS
            id: cache_macos
            if: runner.os == 'macOS'
            uses: actions/cache@v4
            with:
                path: 
                    ./**
                key: 
                    cache-site-macos-${{ github.run_number }}
                enableCrossOsArchive:
                    true    
 
        # ------------------------------------------------------------------------------------------------------
        # Install msbild && Build Ginger Solution
        # ------------------------------------------------------------------------------------------------------
        -   name: Add msbuild to PATH
            if: ${{github.workflow == 'Ginger Windows Test'}} 
            uses: microsoft/setup-msbuild@v1.0.2       

        # ------------------------------------------------------------------------------------------------------
        # Start Testing 
        # ------------------------------------------------------------------------------------------------------
        -   name: 'Testing GingerUtilsTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerUtilsTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerCoreCommonTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerCoreCommonTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerCoreNETUnitTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerCoreNETUnitTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerPluginCoreTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerPluginCoreTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerConsoleTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerConsoleTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal

        -   name: 'Testing GingerAutoPilotTest'
            if: success() || failure()  
            run: dotnet test  Ginger/GingerAutoPilotTest --configuration ${{ env.BUILD_CONFIGURATION }} --logger trx --results-directory D:\a\TestResults --verbosity=normal     

        # ------------------------------------------------------------------------------------------------------
        # Run .Net Framework tests using powershell and publish the results
        # ------------------------------------------------------------------------------------------------------
        -   name: Run tests for Ginger .NetFramework *Test Dlls for Windows
            if: (success() || failure()) && (runner.os == 'Windows')        # run this step even if previous step failed and if the OS is Windows
            run: powershell -file "TestDotNetFrameworkGithub.ps1"

        # ------------------------------------------------------------------------------------------------------
        # Run Standalone CLI Test
        # ------------------------------------------------------------------------------------------------------          
        -   name: Run Standalone CLI Test for Linux
            if: (success() || failure()) && (runner.os == 'Linux')       # run this step even if previous step failed
            shell: bash
            run: |
                pwd 
                ls -alt
                chmod +x CLITestsGithub.sh
                sudo apt install dos2unix
                dos2unix -b CLITestsGithub.sh
                ./CLITestsGithub.sh

        # ------------------------------------------------------------------------------------------------------
        # Publish Test Results
        # ------------------------------------------------------------------------------------------------------
        -   name: Test Report - Windows
            uses: dorny/test-reporter@v1
            if: (success() || failure()) && (runner.os == 'Windows')        # run this step even if previous step failed
            with:
                name: Generate Unit Test Report for Windows    # Name of the check run which will be created
                path: "D:/a/TestResults/*.trx"                # Path to test results
                reporter: dotnet-trx            # Format of test results
            
        -   name: Test Report - Linux
            uses: dorny/test-reporter@v1
            if: (success() || failure())   && (runner.os == 'Linux')      # run this step even if previous step failed
            with:
                name: Generate Unit Test Report for Linux    # Name of the check run which will be created
                path: "**/*.trx"                # Path to test results
                reporter: dotnet-trx            # Format of test results 

        -   name: Test Report - MacOS
            uses: dorny/test-reporter@v1
            if: (success() || failure())  && (runner.os == 'macOS')       # run this step even if previous step failed
            with:
                name: Generate Unit Test Report for MacOS    # Name of the check run which will be created
                path: "**/*.trx"                # Path to test results
                reporter: dotnet-trx            # Format of test results    
