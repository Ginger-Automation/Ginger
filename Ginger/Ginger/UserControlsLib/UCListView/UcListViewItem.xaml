<UserControl x:Class="Ginger.UserControlsLib.UCListView.UcListViewItem"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:usercontrols="clr-namespace:Amdocs.Ginger.UserControls"
             xmlns:uclistview="clr-namespace:Ginger.UserControlsLib.UCListView"
             xmlns:local1="clr-namespace:GingerWPF.GeneralLib"
             mc:Ignorable="d" 
             d:DesignHeight="50" d:DesignWidth="600" Loaded="UcListViewItem_Loaded">

    <UserControl.Resources>
        <local1:ListItemIndexConverter x:Key="ListItemIndexConverter" />
    </UserControl.Resources>

    <Border >
        <Border.Style>
            <Style TargetType="Border">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                        <Setter Property="BorderBrush" Value="{StaticResource $amdocsLogoLinarGradientBrush}"/>
                        <Setter Property="BorderThickness" Value="0,3,0,0"/>
                        <Setter Property="CornerRadius" Value="10,10,0,0"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="False">
                        <Setter Property="BorderBrush" Value="LightGray"/>
                        <Setter Property="BorderThickness" Value="0,1,0,0"/>
                        <Setter Property="CornerRadius" Value="9,10,0,0"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Border.Style>

        <Border x:Name="xMainBorder" BorderThickness="1,0,1,1" CornerRadius="10,10,10,10" BorderBrush="LightGray" Background="White">
            <Grid x:Name="xListItemGrid" Background="Transparent" MouseLeftButtonDown="XListItemGrid_MouseLeftButtonDown" MouseEnter="XListItemGrid_MouseEnter" MouseLeave="XListItemGrid_MouseLeave">
                <Grid.RowDefinitions>
                    <RowDefinition Height="25"/>
                    <RowDefinition x:Name="xExtraDetailsRow" Height="25"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="xIndexCol" Width="25"/>
                    <ColumnDefinition x:Name="xExpandCollapseCol" Width="15"/>
                    <ColumnDefinition x:Name="xIdentifierCol" Width="0"/>
                    <ColumnDefinition x:Name="xIconCol" Width="30"/>
                    <ColumnDefinition x:Name="xDetailsCol" Width="100*"/>
                </Grid.ColumnDefinitions>

                <Border x:Name="xItemIndexBorder"  Grid.Column="0" >
                    <Border.Style>
                        <Style TargetType="Border">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0.5"/>
                            <Setter Property="CornerRadius" Value="7,0,10,0"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Background" Value="{StaticResource $amdocsLogoLinarGradientBrush}"/>
                                    <Setter Property="BorderBrush" Value="{StaticResource $amdocsLogoLinarGradientBrush}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    <TextBlock x:Name="xItemIndexTxt" Text="1">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="VerticalAlignment" Value="Center"/>
                                <Setter Property="HorizontalAlignment" Value="Center"/>
                                <Setter Property="Foreground" Value="{StaticResource $PrimaryColor_Black}"/>
                                <Setter Property="FontSize" Value="12"/>
                                <Setter Property="FontWeight" Value="Bold"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="Foreground" Value="White"/>
                                        <Setter Property="Background" Value="{StaticResource $amdocsLogoLinarGradientBrush}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Foreground" Value="{StaticResource $PrimaryColor_Black}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Border>

                <Border Grid.RowSpan="2" Grid.Column="1">
                    <usercontrols:ucButton x:Name="xExpandCollapseBtn" ButtonType="ImageButton"  ButtonFontImageSize="7" ButtonImageWidth="5" ButtonImageHeight="5" ButtonImageType="Expand" ButtonImageForground="Gray" Click="xExpandCollapseBtn_Click" VerticalAlignment="Top" HorizontalAlignment="Right" Visibility="Visible" ToolTip="Expand" Margin="-5,-13,0,0" Padding="0,0,0,0"/>
                </Border>

                <Border x:Name="xIdentifierBorder" Grid.RowSpan="1" Grid.Column="2" BorderBrush="Transparent" Margin="0,0,0,10"/>

                <usercontrols:ImageMakerControl x:Name="xItemIcon" Grid.RowSpan="2" Grid.Column="3" ImageToolTip="" ImageType="Null" ImageForeground="{StaticResource $BackgroundColor_DarkGray}" SetAsFontImageWithSize="17" Height="20" Width="20" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                <Grid x:Name="xDetailsGrid" Grid.Row="0" Grid.Column="4" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100*" MinWidth="100"/>
                        <ColumnDefinition x:Name="xItemNotificationsClm" Width="0"/>
                        <ColumnDefinition x:Name="xItemStatusClm"  Width="25"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock x:Name="xItemNameTxtBlock" Grid.Column="0" Text="Title" MaxWidth="400">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                <Setter Property="VerticalAlignment" Value="Center"/>
                                <Setter Property="FontSize" Value="15"/>
                                <Setter Property="FontWeight" Value="Normal"/>
                                <Setter Property="Margin" Value="2,0,0,0"/>
                                <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="FontWeight" Value="Bold"/>
                                        <Setter Property="Foreground" Value="{StaticResource $BackgroundColor_Black}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="FontWeight" Value="Normal"/>
                                        <Setter Property="Foreground" Value="{StaticResource $BackgroundColor_Black}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <StackPanel x:Name="xItemNotificationsPnl" Orientation="Horizontal" Grid.Column="1" HorizontalAlignment="Right" Margin="10,0,0,0" />
                    <uclistview:UcItemExecutionStatus x:Name="xItemStatusImage" StatusViewMode="Image"  StatusSize="16" VerticalAlignment="Center" Grid.Column="2"/>
                </Grid>

                <Grid x:Name="xExtraDetailsGrid" Grid.Row="1" Grid.Column="4" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="50*" MinWidth="50"/>
                        <ColumnDefinition x:Name="xItemOperationsClm" Width="0"/>
                        <!--to set width per need like for notifications-->
                    </Grid.ColumnDefinitions>

                    <TextBlock x:Name="xItemDescriptionTxtBlock" Grid.Column="0" Text="Description" FontSize="11" Margin="2 0 0 0" Foreground="{StaticResource $BackgroundColor_DarkGray}" FontStyle="Normal" FontWeight="Normal" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" HorizontalAlignment="Left" VerticalAlignment="Center" MaxWidth="400" />

                    <DockPanel x:Name="xItemOperationsMainPnl" Grid.Column="1" HorizontalAlignment="Right" Visibility="Collapsed">
                        <StackPanel x:Name="xItemExecutionOperationsPnl" Orientation="Horizontal" DockPanel.Dock="Right"/>

                        <GridSplitter x:Name="xOperationsSplitter" Width="1" HorizontalAlignment="Right" DockPanel.Dock="Right" Background="{StaticResource $BackgroundColor_Black}" Margin="0,4,0,4"/>

                        <Menu x:Name="xItemExtraOperationsMenu" Margin="0,0,0,0" DockPanel.Dock="Right" HorizontalAlignment="Right" Background="Transparent" ToolTip="Extra Operations">
                            <MenuItem Background="Transparent" Cursor="Hand">
                                <MenuItem.Header>
                                    <usercontrols:ImageMakerControl  ImageType="EllipsisH" SetAsFontImageWithSize="16" Height="16" Width="16" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="-1,3,0,0" Background="Transparent"/>
                                </MenuItem.Header>
                            </MenuItem>
                        </Menu>

                        <StackPanel x:Name="xItemOperationsPnl" Orientation="Horizontal" DockPanel.Dock="Right"/>
                    </DockPanel>
                </Grid>
            </Grid>
        </Border>
    </Border>
</UserControl>
