{
  "Refrences": [
    {
      "Category": "String Functions",
      "Name": "Trim whitespace",
      "Expression": "{CS Exp=\"hel lo\".Replace(\" \",\"\")}",
      "UseCase": null,
      "Samples": [ "{CS Exp=\"hel lo\".Replace(\" \",\"\")} will change hel lo to hello" ],
      "ReturnType": "String",
      "ExpressionResult": "hello",
      "IconImageName": "@A_16x16.png"
    },
    {
      "Category": "String Functions",
      "Name": "Trim whitespace & line breaks",
      "Expression": "{CS Exp={Actual}.Replace(System.Environment.NewLine,\"\").Replace(\" \",\"\")}",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@A_16x16.png"
    },
    {
      "Category": "General Functions",
      "Name": "Current Windows username",
      "Expression": "{CS Exp=System.Environment.UserName}",
      "UseCase": "Get Current User Name",
      "Samples": [ "{CS Exp=System.Environment.UserName} will give you user name" ],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": null
    },
    {
      "Category": "Date Time Functions",
      "Name": "Get Current Time",
      "Expression": "{CS Exp=DateTime.Now}",
      "UseCase": "You'll get current date time",
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Get Current TimeStamp",
      "Expression": "{CS Exp=DateTimeOffset.UtcNow.ToUnixTimeSeconds()}",
      "UseCase": "You'll get the UTC time stamp",
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Tomorrow",
      "Expression": "{CS Exp=DateTime.Now+new TimeSpan(24,0,0)}",
      "UseCase": "Get Same time for tomorrow  ",
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Time Hour",
      "Expression": "{CS Exp=DateTime.Now.Hour}",
      "UseCase": "Get Hour value in current time in 24h format",
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Time Minutes",
      "Expression": "{CS Exp=DateTime.Now.Minute}",
      "UseCase": "Get Minute Value of current time",
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Time Seconds",
      "Expression": "{CS Exp=DateTime.Now.Second}",
      "UseCase": "Get Minute Value of current time",
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Time Hour (0# format)",
      "Expression": "{CS Exp=DateTime.Now.Hour.ToString(\"D2\")}",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Time Minute (0# format)",
      "Expression": "{CS Exp=DateTime.Now.Minute.ToString(\"D2\")}",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Time Seconds (0# format)",
      "Expression": "{CS Exp=DateTime.Now.Second.ToString(\"D2\")}",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Month (0# format)",
      "Expression": "{CS Exp=DateTime.Now.ToString(\"MM\")}",
      "UseCase": "Get Current Month ",
      "Samples": [ "{CS Exp=DateTime.Now.ToString(\"MM\")} If today's date is 1st Feb it will give 02" ],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Day (0# format)",
      "Expression": "{CS Exp=DateTime.Now.ToString(\"dd\")}",
      "UseCase": "Get Current Day",
      "Samples": [ "If today's date is 1st Feb it will give 01" ],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Year (#### format)",
      "Expression": "{CS Exp=DateTime.Now.Year}",
      "UseCase": "Get Current Year ",
      "Samples": [ "{CS Exp=DateTime.Now.Year} If today's date is 1st Feb 2019 it will give 2019" ],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Year (## format)",
      "Expression": "{CS Exp=DateTime.Now.ToString(\"yy\")}",
      "UseCase": "Get Current Year ",
      "Samples": [ "{CS Exp=DateTime.Now.ToString(\"yy\")} If today's date is 1st Feb 2019 it will give 19" ],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Month Date +3 Days",
      "Expression": "{CS Exp=DateTime.Today.AddDays(3)}",
      "UseCase": "Get Date after three days",
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Date -1 month",
      "Expression": "{CS Exp=DateTime.Today.AddMonths(-1)}",
      "UseCase": "Get same date in previous month",
      "Samples": [ "if Today is 2nd Feb 2019 " ],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Month -1 (MM format)",
      "Expression": "{CS Exp=DateTime.Today.AddMonths(-1).ToString(\"MM/dd/yyyy\")}",
      "UseCase": "get previous month in MM format ",
      "Samples": [ "if Today is 2nd Feb 2019 the expression will result in 01" ],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Current Day of Week (Name)",
      "Expression": "{CS Exp=DateTime.Now.DayOfWeek}",
      "UseCase": "Get Current day of week",
      "Samples": [ "It will return day for today e.g. Friday, Saturday ETC" ],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Get # of days between 2 dates",
      "Expression": "DateDiff(\"d\",\"5-16-2016\",\"6-16-2016\")",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Date Time Functions",
      "Name": "Check if date is valid",
      "Expression": "CStr(IsDate(\"5/18/2016\"))",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "General Operations",
      "Name": "Choose a val from list",
      "Expression": "{CS Exp=new object[] {5,6,7,8}[0]}",
      "UseCase": "Gets ",
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": "5",
      "IconImageName": null
    },
    {
      "Category": "General Operations",
      "Name": "Concatenate list w delimiter",
      "Expression": "{CS Exp=String.Join(\"|\", new string[] { \"A\", \"B\", \"C\", \"D\" })}",
      "UseCase": "Joins an array of elements with provided delimiter",
      "Samples": [ "{CS Exp=String.Join(\"|\", new string[] { \"A\", \"B\", \"C\", \"D\" })} will results in A|B|C|D" ],
      "ReturnType": null,
      "ExpressionResult": "A|B|C|D",
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "String Functions",
      "Name": "Get Inner String Index",
      "Expression": "{CS Exp=\"Hello World\".IndexOf(\"World\")}",
      "UseCase": "Provides Index(base 0) of Provided keyword in string",
      "Samples": [ "{CS Exp=\"Hello World\".IndexOf(\"World\")} will return 6" ],
      "ReturnType": null,
      "ExpressionResult": "6",
      "IconImageName": "@Clock_16x16.png"
    },
    {
      "Category": "Regular Expressions",
      "Name": "Extract Initial Digits",
      "Expression": "1 Pat=([\\d\\D]{2}).*$ P1=12345",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Regex16x16.png"
    },
    {
      "Category": "Regular Expressions",
      "Name": "Extract Last Digits",
      "Expression": "1 Pat=.+([\\d\\D]{2})$ P1=12345",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Regex16x16.png"
    },
    {
      "Category": "Regular Expressions",
      "Name": "Extract Number From Text",
      "Expression": "matchValue Pat=\\d+ P1= aaa 123 bbb",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Regex16x16.png"
    },
    {
      "Category": "Regular Expressions",
      "Name": "Remove Characters From Numbers",
      "Expression": "Replace Pat=\\D+ P1=(404) 200-0352",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@Regex16x16.png"
    },
    {
      "Category": "Output Validation",
      "Name": "Actual Contains String 'ABC'",
      "Expression": "{CS Exp={Actual}.Contains(\"ABC\")}",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": null
    },
    {
      "Category": "Output Validation",
      "Name": "Actual start with 'ABC'",
      "Expression": "{CS Exp={Actual}.StartsWith(\"ABC\")}",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": null
    },
    {
      "Category": "Output Validation",
      "Name": "Actual String Length is 5 chars",
      "Expression": "{CS Exp={Actual}.Length.Equals(5)}",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": "@A_16x16.png"
    },
    {
      "Category": "Output Validation",
      "Name": "Actual SubString from char in position 2 length 3 is 'ABC'",
      "Expression": "{CS Exp={Actual}.Substring(2, 3).Equals(\"ABC\")}",
      "UseCase": null,
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": null,
      "IconImageName": null
    },
    {
      "Category": "Output Validation",
      "Name": "Actual to Upper Case = 'ABC'",
      "Expression": "{CS Exp=\"abc\".ToUpper()}",
      "UseCase": "Returns the string in Upper Case",
      "Samples": [],
      "ReturnType": null,
      "ExpressionResult": "ABC",
      "ExpressionResult": "ABC",
      "IconImageName": "@A_16x16.png"

    },
    {
      "Category": "String Functions",
      "Name": "Replace Text",
      "Expression": "{CS Exp=\"abc\".Replace(\"b\",\"d\")}",
      "UseCase": "Replcaes Text in String",
      "Samples": [ "{CS Exp=\"abc\".Replace(\"b\",\"d\")} will  change abc to adc" ],
      "IconImageName": "@A_16x16.png",
      "ExpressionResult": "adc"
    },
    {
      "Category": "String Functions",
      "Name": "Text Contains",
      "Expression": "{CS Exp=\"abc\".Contains(\"b\")}",
      "UseCase": "Check if provided text is present in string",
      "Samples": [ "{CS Exp=\"abc\".Contains(\"b\")} will return true if b is present in abc" ],
      "IconImageName": "@A_16x16.png",
      "ExpressionResult": "true"
    },
    {
      "Category": "Math",
      "Name": "Add",
      "Expression": "{CS Exp=5+3}",
      "UseCase": "Perfrom Mathematical operations",
      "Samples": [ "{CS Exp=\"5+3\"} will return 8 for 5+3. It will return 2.5 for 5/2.0 but will return 2 for 5/2" ],
      "ExpressionResult": "8"
    },
    {
      "Category": "String Functions",
      "Name": "Starts With",
      "Expression": "{CS Exp=\"Abc\".StartsWith(\"A\")}",
      "UseCase": "Check if provided string Starts with provided characters",
      "Samples": [ "{CS Exp=\"Abc\".StartsWith(\"A\")} will return true as Abc Starts with A" ],
      "IconImageName": "@A_16x16.png",
      "ExpressionResult": "true"
    },
    {
      "Category": "String Functions",
      "Name": "Ends With",
      "Expression": "{CS Exp=\"Abc\".EndsWith(\"c\")}",
      "UseCase": "Check if provided string Ends with provided characters",
      "Samples": [ "{CS Exp=\"\"Abc\".EndsWith(\"c\")\"} will return true as Abc Ends with B" ],
      "IconImageName": "@A_16x16.png",
      "ExpressionResult": "true"
    },
    {
      "Category": "String Functions",
      "Name": "Get String Length",
      "Expression": "{CS Exp=\"Abc\".Length}",
      "UseCase": "Calculates length of string",
      "Samples": [ "{CS Exp=\"Abc\".Length} will return 3 as length of string" ],
      "IconImageName": "@A_16x16.png",
      "ExpressionResult": "3"
    },
    {
      "Category": "String Functions",
      "Name": "Get Substring",
      "Expression": "{CS Exp=\"Abcdefgh\".Substring(1,3)}",
      "UseCase": "Get sub strings from provided starting index(base 0) of specified ",
      "Samples": [ "{CS Exp=\"Abcdefgh\".Substring(1,3)\"}  will return bcd from starting index 1(base 0) of length r " ],
      "IconImageName": "@A_16x16.png",
      "ExpressionResult": "bcd"
    }
   
  ]
}
