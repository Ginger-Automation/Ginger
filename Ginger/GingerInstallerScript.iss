; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Amdocs BEAT Ginger Automation"
#define MyAppVersion "3.0.6.11"
#define MyAppPublisher "Amdocs"
#define MyAppURL "http://https://github.com/Ginger-Automation"
#define MyAppExeName "Ginger.exe"


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{456AA952-D6CD-4D37-B213-F146E69A15E1}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\Amdocs\{#MyAppName}
LicenseFile=D:\BuildConfigs\ReleaseOutput\BuildOutput\Documents\License.rtf
OutputDir=D:\BuildConfigs\Publish\Installers
OutputBaseFilename="Ginger.3.0.6.11"
SetupIconFile=Ginger\bin\debug\GingerIconNew.ico
UninstallDisplayIcon={app}\{#MyAppExeName}
UninstallDisplayName= {#MyAppName} 
Compression=lzma
SolidCompression=yes
UsePreviousTasks=no
DisableReadyPage=no
DisableReadyMemo=no
AlwaysShowGroupOnReadyPage=yes
[InstallDelete]
Type: filesandordirs; Name: {app}\*
[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]


[Files]
Source: "D:\BuildConfigs\ReleaseOutput\BuildOutput\Ginger.exe"; DestDir: "{app}"; Flags: ignoreversion; 
Source: "D:\BuildConfigs\ReleaseOutput\BuildOutput\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs;   Excludes: "Oracle.ManagedDataAccess.dll"
; NOTE: Don't use "Flags: ignoreversion" on any shared system files


[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}" 

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent;
[Code]

//################################################### General Parameters #######################################
var 
  _wizpSettingsTypeSelectionPage: TInputOptionWizardPage;
  _IsUserProfileExist: boolean; 
  _IsCustomizeSettingSelected: boolean; 
  _wizpUserTypeSelectionPage: TInputOptionWizardPage; 
  ChosenUserType: String;
  ChosenUserTerminology: String;
  _strUserType: String;
  _strUserTypeLable: String;
  _wizpTerminologyTypePage: TInputOptionWizardPage;
  _strTerminologyType: String;
  XMLNode: Variant;
  XMLDocument: Variant; 
  XmlElement:  Variant; 
  strUserProfileXMLFilePath: String;

//################################################### Functions & Procedures #######################################

function CheckIfGingerInstalled: boolean;
begin
if ( not FileExists(ExpandConstant('C:\Program Files (x86)\Amdocs\Amdocs BEAT Ginger Automation\unins000.exe')))  then
begin
  if (  FileExists(ExpandConstant('C:\Program Files (x86)\Amdocs\Amdocs BEAT Ginger Automation\ginger.exe')))      then
  begin
  result :=true;
  end
end
if ( not FileExists(ExpandConstant('C:\Program Files\Amdocs\Amdocs BEAT Ginger Automation\unins000.exe')))  then
begin
  if (  FileExists(ExpandConstant('C:\Program Files\Amdocs\Amdocs BEAT Ginger Automation\ginger.exe')))      then
  begin
  result :=true;
  end
end

end;

function InitializeSetup: boolean;
begin

  if  CheckIfGingerInstalled then
     Begin
        result :=false;
    MsgBox('Please Uninstall Amdocs BEAT Ginger Automation Before Proceeding '#13#10''#13#10'Note: If you already uninstall Ginger and still getting this message lease menually delete the Ginger installation folder under the path:' + ExpandConstant('{app}') , mbError, MB_OK);
    end
       else 
       begin
   result:=true
            end
end;

Procedure InitializeWizard();
Var
  left, leftInc, top, topInc: Integer;

  StaticText: TNewStaticText;
Begin
  _IsUserProfileExist := False;
  strUserProfileXMLFilePath:=  ExpandConstant('{userappdata}') + '\amdocs\Ginger\Ginger.UserProfile.xml';
  if (FileExists(strUserProfileXMLFilePath)) then
  Begin
    //Load XML
      _IsUserProfileExist := true;
      XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0'); 
  try 
    
    XMLDocument.async := False;
    XMLDocument.load(strUserProfileXMLFilePath);
    XMLNode := XMLDocument.selectSingleNode('//Ginger.UserProfile');
    if (XMLNode.getAttribute('UserType') = null) then 
    begin
        ChosenUserType := 'Regular';
    end else
    begin
        ChosenUserType := XMLNode.getAttribute('UserType');
    end
    ChosenUserTerminology := XMLNode.getAttribute('TerminologyDictionaryType');

  Except
    MsgBox('An error occured while updating the User Profile XML file' + #13#10 + GetExceptionMessage, mbError, MB_OK);
  End;


  End
  Else
  Begin
    ChosenUserType := 'Regular';
    ChosenUserTerminology := 'Default';
    _IsCustomizeSettingSelected := True;
  End;

  if (ChosenUserType = 'Regular') Then
  Begin
    _strUserTypeLable:='Automation (Technical) user';
  End
  Else if (ChosenUserType = 'Business') Then
  Begin
    _strUserTypeLable:='Business user';
  End


  
  _wizpSettingsTypeSelectionPage :=  CreateInputOptionPage(wpSelectDir, 'Ginger Profile Settings', '','Your current profile settings are:  User type: '+_strUserTypeLable +', Terminology: '+ ChosenUserTerminology  +' '#13#10'Choose your configuration preference and then click Next.' , True, False);
  if (_IsUserProfileExist) then
  Begin
    _wizpSettingsTypeSelectionPage.Add('Keep Current Settings');
    _IsUserProfileExist := true;
  End
  _wizpSettingsTypeSelectionPage.Add('Customize Settings');
  _wizpSettingsTypeSelectionPage.Values[0] := True;   

   
  //User type selection Page Init 
  _strUserType:='Regular';
  _strUserTypeLable:='Automation (Technical) user';
  _wizpUserTypeSelectionPage:= CreateInputOptionPage(_wizpSettingsTypeSelectionPage.ID, 'Ginger User Type', '','Please select the default user type. '#13#10''#13#10'Available User Types: '#13#10'1. Automation (technical) user: Design and execution functionalities '#13#10'2. Business user: Design functionalities '#13#10' '#13#10'Note: the user type can be changed at any time from Ginger UI. '#13#10' '#13#10'Please Select: ' , True, False);
  _wizpUserTypeSelectionPage.Add('Automation (Technical) user');
  _wizpUserTypeSelectionPage.Add('Business user');
  if(ChosenUserType = 'Business') then
  begin
    _wizpUserTypeSelectionPage.Values[1] := True;
  end
  Else  
  begin
    _wizpUserTypeSelectionPage.Values[0] := True;
  end

    //Terminology type selection Page Init 
  _strTerminologyType:='Default';
  _wizpTerminologyTypePage:= CreateInputOptionPage(_wizpUserTypeSelectionPage.ID, 'Ginger Default Terminology', '','Please select the preferred default terminology type to be used. '#13#10''#13#10'Available Terminologies: '#13#10'1. Default- Ginger default items names: Run Set/Business Flow/Activities Group/Activity/Variable '#13#10'2. Testing- Testing (ALM applications) related terms like: Calendar/Test Set/Test Case/Step/Parameter '#13#10'3. Gherkin- BDD related terms like: Business Flow Feature/Scenario/Step '#13#10' '#13#10'Note: the terminology type can be changed at any time from Ginger UI. '#13#10'Please Select: ', True, False);
  _wizpTerminologyTypePage.Add('Default');
  _wizpTerminologyTypePage.Add('Testing');
  _wizpTerminologyTypePage.Add('Gherkin');
 

  if(ChosenUserTerminology = 'Gherkin') then
  begin
    _wizpTerminologyTypePage.Values[2] := True;
  end
  Else if(ChosenUserTerminology = 'Testing')  then
  begin
    _wizpTerminologyTypePage.Values[1] := True;
  end
  Else 
  begin
    _wizpTerminologyTypePage.Values[0] := True;
  end;

End;

Function ShouldSkipPage(PageID: Integer): Boolean;
Begin
  Log('ShouldSkipPage(' + IntToStr(PageID) + ') called');
  { Skip wpInfoBefore page; show all others }
  Case PageID Of
    wpInfoBefore:
      Result := True;
    
    wpSelectDir:
      Result := False;

    _wizpSettingsTypeSelectionPage.ID:
      Result := not _IsUserProfileExist;

    _wizpUserTypeSelectionPage.ID:
      Result := not _IsCustomizeSettingSelected;
         
    _wizpTerminologyTypePage.ID:
      Result := not _IsCustomizeSettingSelected;

    wpReady:
      Result := False;
  End;
End;


Function NextButtonClick(CurPageID: Integer): Boolean;
Var
  resultCode: Integer;
  exeParam: String;  
  strWizardDirValue: String;
Begin
Case CurPageID Of

  _wizpSettingsTypeSelectionPage.ID:
  Begin
  if (_IsUserProfileExist) Then
  Begin
     if (_wizpSettingsTypeSelectionPage.Values[0] = True) Then
     Begin
        _strUserType := ChosenUserType;
        _strTerminologyType := ChosenUserTerminology;
        _IsCustomizeSettingSelected := False;
     End Else If (_wizpSettingsTypeSelectionPage.Values[1] = True) Then
     Begin
        _IsCustomizeSettingSelected := True;
     End;  
  End //Else 
  if (_strUserType = 'Regular') Then
  Begin
    _strUserTypeLable:='Automation (Technical) user';
  End
  Else if (_strUserType = 'Business') Then
  Begin
    _strUserTypeLable:='Business user';
  End

 End;


  _wizpUserTypeSelectionPage.ID:
    Begin
      If _wizpUserTypeSelectionPage.Values[0] = True Then
      Begin
        _strUserType:= 'Regular';
        _strUserTypeLable:='Automation (Technical) user';
      End Else 
      Begin
        _strUserType:= 'Business';
        _strUserTypeLable:='Business user';
      End;
      Result := True;
    End;

      _wizpTerminologyTypePage.ID:
    Begin
      If _wizpTerminologyTypePage.Values[0] = True Then
      Begin
        _strTerminologyType:= 'Default';
      End Else If  _wizpTerminologyTypePage.Values[1] = True Then
      Begin
        _strTerminologyType:= 'Testing';
      End Else If  _wizpTerminologyTypePage.Values[2] = True Then
      Begin
        _strTerminologyType:= 'Gherkin';
      End;
      Result := True;
    End;
 End;
 Result := True;
End;



Procedure CurStepChanged(CurStep: TSetupStep);
var 
strWizardDirValue: String;
 Begin
     If CurStep = ssPostInstall Then
     Begin

       strUserProfileXMLFilePath:=  ExpandConstant('{userappdata}') + '\amdocs\Ginger\Ginger.UserProfile.xml';  
         Log('Eliran  ' + strUserProfileXMLFilePath);
       XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
     Try
     Begin
      strWizardDirValue:= AddBackslash(WizardDirValue);
      SaveStringToFile( strWizardDirValue + '\Ginger.InstallationConfiguration.Json', #13#10 + '{ "UserType" : "'+_strUserType+'", "TerminologyDictionaryType": "'+_strTerminologyType+'"}' + #13#10, False);
     End
     Except
      MsgBox('An error occured while updating the User Profile XML file' + #13#10 + GetExceptionMessage, mbError, MB_OK);
     End ;
 End ;
End ;

Procedure CurPageChanged(CurPageID: Integer);
Begin
  //Next button always available
  Wizardform.NextButton.Enabled := True;

  //Add summary page info
  If CurPageID=wpReady Then
  Begin

   //Summary info
   Wizardform.ReadyMemo.Lines.Add('');
   Wizardform.ReadyMemo.Lines.Add('User Type:'#13#10'      "' + _strUserTypeLable + '"');
   Wizardform.ReadyMemo.Lines.Add('');
   Wizardform.ReadyMemo.Lines.Add('Terminology Type:'#13#10'      "' + _strTerminologyType + '"');
  End;
End;